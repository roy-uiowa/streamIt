#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.11 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 72 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 15 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 4 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 75 1 #"\0"
0.0 4 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 3949 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"syntax/parse"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 15 #"dyoo-while-loop"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 7 #"br/list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"new_environment.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"graph_functions.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";update details: add child abstraction"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #"  "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"syntax-parse"
0 0 24 3 1 #" "
0 0 14 3 3 #"stx"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";handling declarations"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 24 3 2 #"} "
0 0 14 3 12 #"stmtType-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 12 #"stmtType-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";handling statements"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 2 #"} "
0 0 14 3 13 #"statement-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 22 #";(println \"statement\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 13 #"statement-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #"; handline initBlock"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 9 #"initBlock"
0 0 24 3 2 #"} "
0 0 14 3 17 #"initBlockStmt-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 17 #"initBlockStmt-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 8 #")]      "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 15 #";handling block"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #"} "
0 0 14 3 13 #"blockStmt-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 18 #";(println \"block\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 15 #"eachBlkStmt-stx"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 13 #"blockStmt-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 15 #"eachBlkStmt-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 23 #";handle var declaration"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 7 #"varDecl"
0 0 24 3 2 #"} "
0 0 14 3 11 #"varDecl-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 17 3 47 #";;; we are consider variable always initialized"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 30 #";(println #'(varDecl-stx ...))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 11 #"varDecl-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"varType"
0 0 24 3 1 #" "
0 0 14 3 7 #"varName"
0 0 24 3 1 #" "
0 0 14 3 11 #"varInit-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 8 #"var_name"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"varName"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"var_val"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"varInit-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 1 #" "
0 0 14 3 7 #"var_val"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 1 #" "
0 0 14 3 7 #"var_val"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"varType"
0 0 24 3 1 #" "
0 0 14 3 7 #"braket1"
0 0 24 3 1 #" "
0 0 14 3 14 #"arrayLimit-stx"
0 0 24 3 1 #" "
0 0 14 3 7 #"braket2"
0 0 24 3 1 #" "
0 0 14 3 7 #"varName"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 8 #"var_name"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"varName"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"array_limit"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 14 #"arrayLimit-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"array_limit"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-list"
0 0 24 3 1 #" "
0 0 14 3 11 #"array_limit"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #") "
0 0 14 3 8 #"node-env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"varType"
0 0 24 3 1 #" "
0 0 14 3 7 #"varName"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"Un-Initialized\""
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 8 #"exprStmt"
0 0 24 3 2 #"} "
0 0 14 3 12 #"exprStmt-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 12 #"exprStmt-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";handling expression"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"} "
0 0 14 3 8 #"expr-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"expr-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 18 #";handle assignment"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 10 #"assignment"
0 0 24 3 2 #"} "
0 0 14 3 8 #"assg-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 8 #"assg-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #") ()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"varName"
0 0 24 3 1 #" "
0 0 14 3 8 #"idx-expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"assign-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" [("
0 0 14 3 8 #"var_name"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"varName"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"array_idx"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"idx-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"var_val"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"assign-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"array_val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"binding-value"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"new_array"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-set"
0 0 24 3 1 #" "
0 0 14 3 9 #"array_val"
0 0 24 3 1 #" "
0 0 14 3 9 #"array_idx"
0 0 24 3 1 #" "
0 0 14 3 7 #"var_val"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 1 #" "
0 0 14 3 9 #"new_array"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"varName"
0 0 24 3 1 #" "
0 0 14 3 10 #"assign-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 8 #"var_name"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"varName"
0 0 24 3 7 #"))     "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"var_val"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"assign-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 14 3 8 #"var_name"
0 0 24 3 1 #" "
0 0 14 3 7 #"var_val"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 10 #"assign-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"assign-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"assign-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       )]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 8 #"logic_or"
0 0 24 3 2 #"} "
0 0 14 3 7 #"lOr-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 21 #";(println \"logic_or\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 7 #"lOr-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 9 #"logic_and"
0 0 24 3 2 #"} "
0 0 14 3 8 #"lAnd-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 22 #";(println \"logic_and\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"lAnd-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 8 #"equality"
0 0 24 3 2 #"} "
0 0 14 3 12 #"equality-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 21 #";(println \"equality\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 12 #"equality-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"num1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"num2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg2"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"sign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 4 #"\"!=\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 4 #"\"==\""
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"            ))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 32 #";handle comparision instructions"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 10 #"comparison"
0 0 24 3 2 #"} "
0 0 14 3 7 #"cmp-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 7 #"cmp-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"num1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"num2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg2"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"sign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 3 #"\"<\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 3 #"\">\""
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 4 #"\"<=\""
0 0 24 3 3 #") ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 4 #"\">=\""
0 0 24 3 3 #") ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 33 #"; handle addition and subtruction"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 8 #"addition"
0 0 24 3 2 #"} "
0 0 14 3 7 #"add-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 7 #"add-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"num1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"num2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg2"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"sign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 3 #"\"+\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 3 #"\"-\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 35 #";handle multiplication and division"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 14 #"multiplication"
0 0 24 3 2 #"} "
0 0 14 3 8 #"mult-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 27 #";(println \"multiplication\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 8 #"mult-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 4 #"arg2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"num1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg1"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"num2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"arg2"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"sign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 3 #"\"*\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 19 3 3 #"\"/\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 4 #"num1"
0 0 24 3 1 #" "
0 0 14 3 4 #"num2"
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 37 #";handle unary operators: -x, x++, x--"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 5 #"unary"
0 0 24 3 2 #"} "
0 0 14 3 9 #"unary-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 18 #";(println \"unary\")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 9 #"unary-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"++\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"--\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"sign"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 19 3 4 #"\"++\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 19 3 4 #"\"--\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                ))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"case"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"sign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                [("
0 0 19 3 3 #"\"-\""
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"arg"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 8 #")])]    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 22 #";handle function calls"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 4 #"call"
0 0 24 3 2 #"} "
0 0 14 3 8 #"call-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 7 #")      "
0 0 17 3 14 #"; problem here"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 58
#";(println #'(call-stx ...))          ; dispatch issue     "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 8 #"call-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"brkt1"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 5 #"brkt2"
0 0 24 3 5 #")    "
0 0 17 3 30 #";procedure call with arguments"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 18 #"calledFunctionName"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #"("
0 0 14 3 6 #"second"
0 0 24 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"name"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 18 #"calledFunctionName"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"push\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"pushRate"
0 0 24 3 2 #" ("
0 0 14 3 13 #"binding-value"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ["
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 19 #";(println pushRate)"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"pushRate"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"pushRate"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 13 #"StreamFilter?"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #") "
0 0 17 3 55 #";; we can chek for other kind of nodes and through erro"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 24 #"set-StreamFilter-Output!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 19 #"StreamFilter-Output"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                           "
0 0 14 3 5 #"value"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                         "
0 0 17 3 66
#";(println (show-channel-data (get-output-channel nodeName graph)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                         ]))] "
0 0 17 3 40 #";push data to the output channel as well"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"push"
0 0 19 3 1 #" "
0 0 19 3 5 #"items"
0 0 19 3 1 #" "
0 0 19 3 4 #"more"
0 0 19 3 1 #" "
0 0 19 3 4 #"than"
0 0 19 3 1 #" "
0 0 19 3 12 #"the limit!!\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 18 #"calledFunctionName"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"peek\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"peekRate"
0 0 24 3 2 #" ("
0 0 14 3 13 #"binding-value"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 8 #"peekRate"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 8 #"peekRate"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 17 #"show-channel-data"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-input-channel"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"interpret"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"args"
0 0 24 3 3 #")) "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"peek"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"peek"
0 0 19 3 1 #" "
0 0 19 3 5 #"items"
0 0 19 3 1 #" "
0 0 19 3 4 #"more"
0 0 19 3 1 #" "
0 0 19 3 4 #"than"
0 0 19 3 1 #" "
0 0 19 3 12 #"the limit!!\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNodeName"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #"("
0 0 14 3 6 #"second"
0 0 24 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"name"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 7 #"context"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ["
0 0 14 3 10 #"listOfArgs"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 11 #"eachArg-stx"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"args"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 10 #"listOfArgs"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 10 #"listOfArgs"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 11 #"eachArg-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 15 #"StreamPipeLine?"
0 0 24 3 2 #"  "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 19 #"StreamPipeLine-Body"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #")]) "
0 0 17 3 19 #";interpret pipeline"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 23 #"StreamPipeLine-InitFlag"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamPipeLine-Parameters"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 10 #"listOfArgs"
0 0 24 3 2 #" ("
0 0 14 3 23 #"StreamPipeLine-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 23 #"StreamPipeLine-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 12 #"programGraph"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 16 #"StreamSplitJoin?"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 2 #"(["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamSplitJoin-Body"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-InitFlag"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 26 #"StreamSplitJoin-Parameters"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 10 #"listOfArgs"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 12 #"programGraph"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     [("
0 0 14 3 13 #"StreamFilter?"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-InitFlag"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-preWork"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))) "
0 0 17 3 27 #";interpret prework function"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-preWork"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 23 #"StreamFilter-Parameters"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 10 #"listOfArgs"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 12 #"programGraph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-pushRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-popRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-peekRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 26 #"set-StreamFilter-InitFlag!"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 17 #"StreamFilter-Work"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #")]) "
0 0 17 3 25 #"; interpret work function"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-InitFlag"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 23 #"StreamFilter-Parameters"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 10 #"listOfArgs"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 26 #"set-StreamFilter-InitFlag!"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-pushRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-popRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-peekRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 3 #"arg"
0 0 24 3 2 #" ("
0 0 14 3 23 #"StreamFilter-Parameters"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #")] ["
0 0 14 3 5 #"value"
0 0 24 3 1 #" "
0 0 14 3 10 #"listOfArgs"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-pushRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-popRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-peekRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 5 #"graph"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 67
#"                   (if (eq? (StreamObj-initFlag calledfunction) #f)"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"                       (begin"
0 0 17 29 1 #"\n"
0 0 17 3 68
#"                         (set-StreamObj-initFlag! calledfunction #t)"
0 0 17 29 1 #"\n"
0 0 17 3 25 #"                         "
0 0 17 3 98
(
 #"(extend-env (StreamObj-parameters calledfunction) listOfArgs (Stream"
 #"Obj-localEnv calledfunction)))"
) 0 0 17 29 1 #"\n"
0 0 17 3 29 #"                       (begin"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"                         (for ([arg listOfArgs])"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"                           (println arg))))"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"                   ;(println env)"
0 0 17 29 1 #"\n"
0 0 17 3 45 #"                   ;(println (lookup-in-env \""
0 0 17 3 1 #"a"
0 0 17 3 7 #"\" env))"
0 0 17 29 1 #"\n"
0 0 17 3 142
(
 #"                   (interpret (StreamObj-body calledfunction) (Strea"
 #"mObj-localEnv calledfunction) sourceStruct calledfunction  previousO"
 #"bject)"
) 0 0 17 29 1 #"\n"
0 0 17 3 21 #"                   |#"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   )"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 )]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"              )))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"brkt1"
0 0 24 3 1 #" "
0 0 14 3 5 #"brkt2"
0 0 24 3 10 #")         "
0 0 17 3 33 #";procedure call without arguments"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 18 #"calledFunctionName"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #"("
0 0 14 3 6 #"second"
0 0 24 3 1 #"("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"name"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 18 #"calledFunctionName"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"pop\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"popRate"
0 0 24 3 2 #" ("
0 0 14 3 13 #"binding-value"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 17 3 18 #";(println popRate)"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 7 #"popRate"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"popRate"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"channel-empty?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-input-channel"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 7 #"channel"
0 0 19 3 1 #" "
0 0 19 3 9 #"is empty\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 12 #"numberPopped"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 14 3 12 #"numberPopped"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"can"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 3 #"pop"
0 0 19 3 1 #" "
0 0 19 3 5 #"items"
0 0 19 3 1 #" "
0 0 19 3 4 #"more"
0 0 19 3 1 #" "
0 0 19 3 4 #"than"
0 0 19 3 1 #" "
0 0 19 3 12 #"the limit!!\""
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 18 #"calledFunctionName"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ["
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 7 #"context"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 15 #"StreamPipeLine?"
0 0 24 3 2 #"  "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 19 #"StreamPipeLine-Body"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #")]) "
0 0 17 3 19 #";interpret pipeline"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 23 #"StreamPipeLine-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 12 #"programGraph"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 16 #"StreamSplitJoin?"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 2 #"(["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamSplitJoin-Body"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 12 #"programGraph"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        [("
0 0 14 3 13 #"StreamFilter?"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-InitFlag"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-preWork"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))) "
0 0 17 3 27 #";interpret prework function"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-preWork"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 12 #"programGraph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-pushRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-popRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-peekRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 26 #"set-StreamFilter-InitFlag!"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 2 #" ("
0 0 14 3 17 #"StreamFilter-Work"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #")]) "
0 0 17 3 25 #"; interpret work function"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                             [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-InitFlag"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 26 #"set-StreamFilter-InitFlag!"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-pushRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-popRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 10 #"add-to-env"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-peekRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"pushRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-pushRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"popRate\""
0 0 24 3 2 #" ("
0 0 14 3 20 #"StreamFilter-popRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 11 #"update-env!"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"peekRate\""
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-peekRate"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 3 #") ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNode-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"calledNodeName"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #" ("
0 0 14 3 21 #"StreamFilter-LocalEnv"
0 0 24 3 1 #" "
0 0 14 3 10 #"calledNode"
0 0 24 3 2 #") "
0 0 14 3 5 #"graph"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                      )])))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 4 #"name"
0 0 24 3 3 #") ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #")])]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 7 #"primary"
0 0 24 3 2 #"} "
0 0 14 3 11 #"primary-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 35 #";(println (syntax-e #'primary-stx))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"primary-stx"
0 0 24 3 4 #")) ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"primary-stx"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"string?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"primary-stx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" [("
0 0 14 3 8 #"printStr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"primary-stx"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 9 #"substring"
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-length"
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  [("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"push\""
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 2 #") "
0 0 14 3 8 #"printStr"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"pop\""
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 2 #") "
0 0 14 3 8 #"printStr"
0 0 24 3 4 #"]   "
0 0 17 3 26 #"; handle printing peek/pop"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"peek\""
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 2 #") "
0 0 14 3 8 #"printStr"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         [("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"print"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~a"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Undefined"
0 0 19 3 11 #" variable:\""
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 13 #"binding-value"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lookup-in-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"printStr"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ]"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                  ))])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 25 #";handling pring statement"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 9 #"printStmt"
0 0 24 3 2 #"} "
0 0 14 3 13 #"printExpr-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 13 #"printExpr-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"string"
0 0 24 3 1 #" "
0 0 14 3 8 #"Expr-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 12 #"print-string"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 8 #"Expr-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            [("
0 0 14 3 7 #"syntax?"
0 0 24 3 1 #" "
0 0 14 3 12 #"print-string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 12 #"print-string"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 12 #"print-string"
0 0 24 3 5 #")]))]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"Expr-stx"
0 0 24 3 3 #") ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"call"
0 0 19 3 6 #" stmt\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"       )]  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 34 #";handle spliter-joiner intructions"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 13 #"splitjoinStmt"
0 0 24 3 2 #"} "
0 0 14 3 10 #"spltjn-stx"
0 0 24 3 1 #" "
0 0 14 3 14 #"spltjnType-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 27 #";(println #'spltjnType-stx)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 65
#";(println (show-channel-data (get-input-channel nodeName graph)))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-InitFlag"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 11 #"syntax-case"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 14 #"spltjnType-stx"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 12 #"spltJoinType"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 12 #"spltJoinType"
0 0 24 3 4 #"))) "
0 0 19 3 11 #"\"duplicate\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 17 3 22 #";(println \"duplicate\")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"spltjn-stx"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"split\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 30 #"set-StreamSplitJoin-SplitType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"duplicate\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 30 #"set-StreamSplitJoin-SplitRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 17 3 17 #"; no rate setting"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"duplicate\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                   "
0 0 17 3 23 #";(println \"roundrobin\")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"spltjn-stx"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"split\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 30 #"set-StreamSplitJoin-SplitType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"roundrobin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 30 #"set-StreamSplitJoin-SplitRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")) "
0 0 17 3 17 #"; no rate setting"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"roundrobin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 12 #"spltJoinType"
0 0 24 3 1 #" "
0 0 14 3 5 #"rates"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 19 #"splitjoin-rates-stx"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 12 #"syntax->list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"rates"
0 0 24 3 5 #"))] ["
0 0 14 3 8 #"sj_rates"
0 0 24 3 1 #" "
0 0 14 3 4 #"null"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 4 #"rate"
0 0 24 3 1 #" "
0 0 14 3 19 #"splitjoin-rates-stx"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 8 #"sj_rates"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 8 #"sj_rates"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 14 3 4 #"rate"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 19 #";(println sj_rates)"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 12 #"spltJoinType"
0 0 24 3 4 #"))) "
0 0 19 3 11 #"\"duplicate\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 17 3 18 #";(println #'rates)"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"spltjn-stx"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"split\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 30 #"set-StreamSplitJoin-SplitType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"duplicate\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 30 #"set-StreamSplitJoin-SplitRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"sj_rates"
0 0 24 3 3 #")) "
0 0 17 3 13 #"; split rates"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"duplicate\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"sj_rates"
0 0 24 3 5 #")))) "
0 0 17 3 11 #";join rates"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"spltjn-stx"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"split\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 30 #"set-StreamSplitJoin-SplitType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"roundrobin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"sj_rates"
0 0 24 3 3 #")) "
0 0 17 3 14 #"; rate setting"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinType!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"roundrobin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 29 #"set-StreamSplitJoin-JoinRate!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"sj_rates"
0 0 24 3 11 #"))))))]))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"  "
0 0 17 3 31 #";after initialization splitting"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"spltjn-stx"
0 0 24 3 2 #") "
0 0 19 3 7 #"\"split\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 75
(
 #";first remove the already copied elements from input if split was du"
 #"plicate"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-SplitType"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"duplicate\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-SplitRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-input-channel"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"spliit-input"
0 0 24 3 2 #" ("
0 0 14 3 2 #"~a"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 5 #"input"
0 0 19 3 1 #" "
0 0 19 3 7 #"channel"
0 0 19 3 7 #" empty\""
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-SplitRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 9 #"childNode"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-ChildList"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 4 #")]) "
0 0 17 3 32 #";copy data to each input channel"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 17 #"append-to-channel"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 9 #"childNode"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 7 #"))))])]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"Duplicate"
0 0 19 3 1 #" "
0 0 19 3 5 #"doesn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 7 #"support"
0 0 19 3 1 #" "
0 0 19 3 9 #"different"
0 0 19 3 7 #" rates\""
0 0 24 3 4 #")]) "
0 0 17 3 56 #"; may be we need to access input channel of child object"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 17 3 27 #";incase of roundrobin split"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-SplitRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 9 #"childNode"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-ChildList"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 5 #")])  "
0 0 17 3 30 #";roundrobin join without rates"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-SplitRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 17 #"append-to-channel"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 9 #"childNode"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 9 #"childNode"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-ChildList"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 4 #")] ["
0 0 14 3 8 #"eachRate"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-JoinRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 4 #")]) "
0 0 17 3 27 #";roundrobin join with rates"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 8 #"eachRate"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pop"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 17 #"append-to-channel"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 9 #"childNode"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 8 #"))))))])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 42 #";;;;;;;;;;;;;this portion handles the join"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 3 2 #"  "
0 0 17 3 36 #"; how join should copy to the output"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"syntax-e"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"spltjn-stx"
0 0 24 3 2 #") "
0 0 19 3 6 #"\"join\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 29 #"set-StreamSplitJoin-InitFlag!"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #") "
0 0 17 3 33 #";;; split-join initilization flag"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-JoinType"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #") "
0 0 19 3 12 #"\"roundrobin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-JoinRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 9 #"childNode"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-ChildList"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 5 #")])  "
0 0 17 3 30 #";roundrobin join without rates"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-JoinRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 16 #"pop-channel-data"
0 0 24 3 1 #" "
0 0 14 3 9 #"childNode"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 9 #"childNode"
0 0 24 3 2 #" ("
0 0 14 3 25 #"StreamSplitJoin-ChildList"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 4 #")] ["
0 0 14 3 8 #"eachRate"
0 0 24 3 2 #" ("
0 0 14 3 24 #"StreamSplitJoin-JoinRate"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 4 #")]) "
0 0 17 3 27 #";roundrobin join with rates"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 9 #"childNode"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 8 #"eachRate"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 16 #"pop-channel-data"
0 0 24 3 1 #" "
0 0 14 3 9 #"childNode"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"push"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  ))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 9 #"duplicate"
0 0 19 3 1 #" "
0 0 19 3 4 #"join"
0 0 19 3 1 #" "
0 0 19 3 3 #"isn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 7 #"handled"
0 0 19 3 5 #" yet\""
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 12 #"addStatement"
0 0 24 3 2 #"} "
0 0 14 3 11 #"addStmt-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 24 #";(println #'addStmt-stx)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"addStmt-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #";handle for loops"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    [({"
0 0 14 3 8 #"~literal"
0 0 24 3 1 #" "
0 0 14 3 7 #"forStmt"
0 0 24 3 2 #"} "
0 0 14 3 11 #"forInit-stx"
0 0 24 3 1 #" "
0 0 14 3 11 #"forCond-stx"
0 0 24 3 1 #" "
0 0 14 3 10 #"forInc-stx"
0 0 24 3 1 #" "
0 0 14 3 11 #"forBody-stx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"forInit-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 5 #"while"
0 0 24 3 2 #" ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"forCond-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 11 #"forBody-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"interpret"
0 0 24 3 1 #" "
0 0 21 3 2 #"#'"
0 0 14 3 10 #"forInc-stx"
0 0 24 3 1 #" "
0 0 14 3 8 #"nodeName"
0 0 24 3 1 #" "
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 8 #"node-env"
0 0 24 3 1 #" "
0 0 14 3 5 #"graph"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            )]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"    ;handle if-else"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"    [({~literal ifStmt} branching-stx ...)"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"     (syn"
0 0 17 3 32 #"tax-case #'(branching-stx ...)()"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"       [(condStmt-stx ifBlk-stx elseBlk-stx)"
0 0 17 29 1 #"\n"
0 0 17 3 84
(
 #"        (if (interpret #'condStmt-stx env sourceStruct currentObject"
 #" previousObject)"
) 0 0 17 29 1 #"\n"
0 0 17 3 81
(
 #"            (interpret #'ifBlk-stx env sourceStruct currentObject pr"
 #"eviousObject)"
) 0 0 17 29 1 #"\n"
0 0 17 3 11 #"           "
0 0 17 3 73
(
 #" (interpret #'elseBlk-stx env sourceStruct currentObject previousObj"
 #"ect))"
) 0 0 17 29 1 #"\n"
0 0 17 3 9 #"        ]"
0 0 17 29 1 #"\n"
0 0 17 3 32 #"       [(condStmt-stx ifBlk-stx)"
0 0 17 29 1 #"\n"
0 0 17 3 87
(
 #"        (cond [(interpret #'condStmt-stx env sourceStruct currentObj"
 #"ect previousObject)"
) 0 0 17 29 1 #"\n"
0 0 17 3 51 #"               (interpret #'ifBlk-stx env sourceStr"
0 0 17 3 35 #"uct currentObject previousObject)])"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"        ]"
0 0 17 29 1 #"\n"
0 0 17 3 9 #"       )]"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"    [({~literal exprStmt} exprStmt-stx)"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"     ;(println \""
0 0 17 3 2 #"in"
0 0 17 3 1 #" "
0 0 17 3 10 #"Expression"
0 0 17 3 1 #" "
0 0 17 3 9 #"statement"
0 0 17 3 2 #"\")"
0 0 17 29 1 #"\n"
0 0 17 3 82
(
 #"     (interpret #'exprStmt-stx env sourceStruct currentObject previo"
 #"usObject)]    "
) 0 0 17 29 1 #"\n"
0 0 17 3 34 #"    ;variable declaration handling"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"    ;handling expression"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"    [({~literal expression} expr-stx)"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"     ;(println \""
0 0 17 3 10 #"Expression"
0 0 17 3 2 #"\")"
0 0 17 29 1 #"\n"
0 0 17 3 74
(
 #"     (interpret #'expr-stx env sourceStruct currentObject previousOb"
 #"ject)]"
) 0 0 17 29 1 #"\n"
0 0 17 3 42 #"    [({~literal operator} operator-string)"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"     ;(display (syntax->datum #'operator-string))"
0 0 17 29 1 #"\n"
0 0 17 3 23 #"     #'operator-string]"
0 0 17 29 1 #"\n"
0 0 17 3 40 #"    [({~literal literal} value) #'value]"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 26 #";; handles function lookup"
0 0 17 3 20 #" from the enviroment"
0 0 17 29 1 #"\n"
0 0 17 3 46 #"(define (functionLookUp funcName functionList)"
0 0 17 29 1 #"\n"
0 0 17 3 70
(
 #"  ;(println (string=? (StreamObj-Name (first functionList)) funcName"
 #"))"
) 0 0 17 29 1 #"\n"
0 0 17 3 7 #"  (cond"
0 0 17 29 1 #"\n"
0 0 17 3 66
#"    [(if (string=? (StreamObj-Name (first functionList)) funcName)"
0 0 17 29 1 #"\n"
0 0 17 3 26 #"      (first functionList)"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"      (functionLookUp funcName (rest functionList)))]"
0 0 17 29 1 #"\n"
0 0 17 3 47 #"    [else (error 'functionLookUP (~a funcName \""
0 0 17 3 4 #":Not"
0 0 17 3 1 #" "
0 0 17 3 7 #"defined"
0 0 17 3 1 #" "
0 0 17 3 2 #"!!"
0 0 17 3 5 #"\"))])"
0 0 17 29 1 #"\n"
0 0 17 3 5 #"  )|#"
0           0
